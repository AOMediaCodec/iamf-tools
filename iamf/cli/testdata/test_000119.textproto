# Copyright (c) 2024, Alliance for Open Media. All rights reserved
#
# This source code is subject to the terms of the BSD 3-Clause Clear License
# and the Alliance for Open Media Patent License 1.0. If the BSD 3-Clause Clear
# License was not distributed with this source code in the LICENSE file, you
# can obtain it at www.aomedia.org/license/software-license/bsd-3-c-c. If the
# Alliance for Open Media Patent License 1.0 was not distributed with this
# source code in the PATENTS file, you can obtain it at
# www.aomedia.org/license/patent.

# proto-file: iamf/cli/proto/user_metadata.proto
# proto-message: UserMetadata

test_vector_metadata {
  human_readable_description:
    "An invalid IAMF stream using an imaginary `codec_id`. It would be valid "
    "if the `codec_id` was `ipcm`."
  file_name_prefix: "test_000119"
  is_valid: false
  partition_mix_gain_parameter_blocks: false
  validate_user_loudness: true
  mp4_fixed_timestamp: "2024-07-10 00:00:00"
  primary_tested_spec_sections: [
    "3.5/codec_id",
    "4.1/Simple Profile"
  ]
  base_test: "test_000002"
}

ia_sequence_header_metadata {
  primary_profile: PROFILE_VERSION_SIMPLE
  additional_profile: PROFILE_VERSION_SIMPLE
}

arbitrary_obu_metadata: [
  {
    # Simple profile does not support `codec_id == fake`.
    invalidates_bitstream: true
    insertion_hook: INSERTION_HOOK_AFTER_CODEC_CONFIGS
    obu_type: OBU_IA_CODEC_CONFIG
    payload:
      "\x22"  # codec_config_id.
      "fake"  # codec_id.
      "\x02"  # num_samples_per_frame.
      "\x00\x00"  # audio_roll_distance.
      # Begin an imaginary `decoder_config`. For convenience it has the same
      # syntax as LPCM.
      "\x01"  # sample_format_flags.
      "\x10"  # sample_size.
      "\x00\x00\xbb\x80"  # sample_rate.
  },
  {
    insertion_hook: INSERTION_HOOK_AFTER_AUDIO_ELEMENTS
    obu_type: OBU_IA_AUDIO_ELEMENT
    payload:
      "\x33"  # audio_element_id.
      "\x00"  # audio_element_type (3), reserved (5).
      "\x22"  # codec_config_id.
      "\x01"  # num_substreams.
      "\x00"  # substream_id.
      "\x00"  # num_parameters.
      "\x20"  # num_layers (3), reserved (5)
      "\x10"  # loudspeaker_layout (4), output_gain_is_present_flag (1), reserved (2).
      "\x01"  # substream_count.
      "\x01"  # coupled_substream_count.
  },
  {
    insertion_hook: INSERTION_HOOK_AFTER_MIX_PRESENTATIONS
    obu_type: OBU_IA_MIX_PRESENTATION
    payload:
      "\x44"  # mix_presentation_id.
      "\x00"  # count_label.
      "\x01"  # num_sub_mixes.
      "\x01"  # num_audio_elements.
      "\x33"  # audio_element_id.
      "\x00"  # headphones_rendering_mode (2), reserved (6).
      "\x00"  # rendering_config_size.
      # Begin ElementMixConfig.
      "\x66"  # parameter_id.
      "\x80\xf7\x02"  # parameter_rate (leb128).
      "\x80"  # param_definition_mode (1), reserved (7).
      "\x00\00"  # default_mix_gain.
      # Begin OutputMixConfig.
      "\x66"  # parameter_id.
      "\x80\xf7\x02"  # parameter_rate (leb128).
      "\x80"  # param_definition_mode (1), reserved (7).
      "\x00\00"  # default_mix_gain.
      "\x01"  # num_layouts.
      "\x80"  # layout_type (2), sound_system (4), reserved (2).
      "\x00"  # info_type.
      "\x00\x00"  # integrated_loudness.
      "\x00\x00"  # digital_peak.
  },
  {
    insertion_hook: INSERTION_HOOK_AFTER_AUDIO_FRAMES_AT_TICK
    insertion_tick: 0
    obu_type: OBU_IA_AUDIO_FRAME_ID_0
    # A short payload which which represents an audio frame encoding using an
    # imaginary codec associated with the imaginary `codec_id`.
    payload: "fakedata"
  }
]

temporal_delimiter_metadata {
  enable_temporal_delimiters: false
}
